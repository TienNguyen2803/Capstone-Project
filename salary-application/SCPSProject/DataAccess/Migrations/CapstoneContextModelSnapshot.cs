// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(CapstoneContext))]
    partial class CapstoneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Account", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .HasMaxLength(20);

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(3);

                    b.HasKey("Code");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataAccess.Entities.ConstantType", b =>
                {
                    b.Property<int>("FormulaDetailId");

                    b.Property<decimal>("Value");

                    b.HasKey("FormulaDetailId");

                    b.ToTable("ConstantTypes");
                });

            modelBuilder.Entity("DataAccess.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepName")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("DepOffice")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataAccess.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ApplyDate");

                    b.Property<int>("CloseDay");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("Deadline");

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<string>("DocumentUrl");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<int?>("FormulaId");

                    b.Property<DateTimeOffset?>("SignDate");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FormulaId")
                        .IsUnique()
                        .HasFilter("[FormulaId] IS NOT NULL");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DataAccess.Entities.Employee", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20);

                    b.Property<string>("Address")
                        .IsUnicode(true);

                    b.Property<DateTimeOffset?>("DateOfBirth");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(320);

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool?>("IsForeigner")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsWorking")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<DateTimeOffset?>("StartDate");

                    b.HasKey("Code");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataAccess.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellMapping")
                        .HasMaxLength(10);

                    b.Property<string>("DataType")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<bool>("IsMonthlyComponent");

                    b.Property<string>("LongName")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SampleValue")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("0");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("DataAccess.Entities.FieldType", b =>
                {
                    b.Property<int>("FormulaDetailId");

                    b.Property<int>("FieldId");

                    b.HasKey("FormulaDetailId");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("DataAccess.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("CreateDate");

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<bool>("IsSalaryFormula")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("DataAccess.Entities.FormulaDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormulaId");

                    b.Property<int>("Operator");

                    b.Property<int>("Ordinal");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FormulaId");

                    b.ToTable("FormulaDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.FormulaType", b =>
                {
                    b.Property<int>("FormulaDetailId");

                    b.Property<int>("FormulaId");

                    b.HasKey("FormulaDetailId");

                    b.HasIndex("FormulaId");

                    b.ToTable("FormulaTypes");
                });

            modelBuilder.Entity("DataAccess.Entities.MonthlySalaryComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId");

                    b.Property<int>("PayslipId");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PayslipId");

                    b.ToTable("MonthlySalaryComponents");
                });

            modelBuilder.Entity("DataAccess.Entities.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocId");

                    b.Property<DateTimeOffset?>("FromDate");

                    b.Property<int>("Month");

                    b.Property<DateTimeOffset?>("PayDate");

                    b.Property<decimal>("Revenue");

                    b.Property<int>("StandardWorkDay");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTimeOffset?>("ToDate");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("DataAccess.Entities.PayrollComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId");

                    b.Property<int>("PayrollId");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PayrollComponents");
                });

            modelBuilder.Entity("DataAccess.Entities.Payslip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("EmpId");

                    b.Property<int>("PayrollId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("PayrollId");

                    b.ToTable("Payslips");
                });

            modelBuilder.Entity("DataAccess.Entities.PayslipTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocId");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("TemplateUrl");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.ToTable("PayslipTemplates");
                });

            modelBuilder.Entity("DataAccess.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DataAccess.Entities.PositionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ApplyDate");

                    b.Property<string>("EmpCode");

                    b.Property<int>("PositionId");

                    b.HasKey("Id");

                    b.HasIndex("EmpCode");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.ReferenceTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompareType");

                    b.Property<string>("Description")
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ReturnType")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<int>("SourceType");

                    b.Property<int>("SourceValue");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ReferenceTables");
                });

            modelBuilder.Entity("DataAccess.Entities.ReferenceTableDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("ReferenceTableId");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("ReferenceTableId");

                    b.ToTable("ReferenceTableDetails");
                });

            modelBuilder.Entity("DataAccess.Entities.ReferenceTableType", b =>
                {
                    b.Property<int>("FormulaDetailId");

                    b.Property<int>("RefenceTableTypeId");

                    b.HasKey("FormulaDetailId");

                    b.HasIndex("RefenceTableTypeId");

                    b.ToTable("ReferenceTableTypes");
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Entities.SalaryComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ApplyDate");

                    b.Property<string>("EmpId")
                        .IsRequired();

                    b.Property<int>("FieldId");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.HasIndex("FieldId");

                    b.ToTable("SalaryComponents");
                });

            modelBuilder.Entity("DataAccess.Entities.Account", b =>
                {
                    b.HasOne("DataAccess.Entities.Employee", "Employee")
                        .WithOne("Account")
                        .HasForeignKey("DataAccess.Entities.Account", "Code")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.ConstantType", b =>
                {
                    b.HasOne("DataAccess.Entities.FormulaDetail", "FormulaDetail")
                        .WithOne("ConstantType")
                        .HasForeignKey("DataAccess.Entities.ConstantType", "FormulaDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.Document", b =>
                {
                    b.HasOne("DataAccess.Entities.Formula", "Formula")
                        .WithOne("Document")
                        .HasForeignKey("DataAccess.Entities.Document", "FormulaId");
                });

            modelBuilder.Entity("DataAccess.Entities.Employee", b =>
                {
                    b.HasOne("DataAccess.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.FieldType", b =>
                {
                    b.HasOne("DataAccess.Entities.Field", "Field")
                        .WithMany("FieldTypes")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.FormulaDetail", "FormulaDetail")
                        .WithOne("FieldType")
                        .HasForeignKey("DataAccess.Entities.FieldType", "FormulaDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.FormulaDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Formula", "Formula")
                        .WithMany("FormulaDetails")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Entities.FormulaType", b =>
                {
                    b.HasOne("DataAccess.Entities.FormulaDetail", "FormulaDetail")
                        .WithOne("FormulaType")
                        .HasForeignKey("DataAccess.Entities.FormulaType", "FormulaDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Formula", "Formula")
                        .WithMany("FormulaTypes")
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataAccess.Entities.MonthlySalaryComponent", b =>
                {
                    b.HasOne("DataAccess.Entities.Field", "Field")
                        .WithMany("MonthlySalaryComponents")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Payslip", "Payslip")
                        .WithMany("MonthlySalaryComponents")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.Payroll", b =>
                {
                    b.HasOne("DataAccess.Entities.Document", "Document")
                        .WithMany("Payrolls")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.PayrollComponent", b =>
                {
                    b.HasOne("DataAccess.Entities.Field", "Field")
                        .WithMany("PayrollComponents")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Payroll", "Payroll")
                        .WithMany("PayrollComponents")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.Payslip", b =>
                {
                    b.HasOne("DataAccess.Entities.Employee", "Employee")
                        .WithMany("Payslips")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Payroll", "Payroll")
                        .WithMany("Payslips")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.PayslipTemplate", b =>
                {
                    b.HasOne("DataAccess.Entities.Document", "Document")
                        .WithMany("PayslipTemplates")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.PositionDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.Employee", "Employee")
                        .WithMany("PositionDetails")
                        .HasForeignKey("EmpCode");

                    b.HasOne("DataAccess.Entities.Position", "Position")
                        .WithMany("PositionDetails")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.ReferenceTableDetail", b =>
                {
                    b.HasOne("DataAccess.Entities.ReferenceTable", "ReferenceTable")
                        .WithMany("ReferenceTableDetails")
                        .HasForeignKey("ReferenceTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.ReferenceTableType", b =>
                {
                    b.HasOne("DataAccess.Entities.FormulaDetail", "FormulaDetail")
                        .WithOne("ReferenceTableType")
                        .HasForeignKey("DataAccess.Entities.ReferenceTableType", "FormulaDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.ReferenceTable", "ReferenceTable")
                        .WithMany("ReferenceTableTypes")
                        .HasForeignKey("RefenceTableTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataAccess.Entities.SalaryComponent", b =>
                {
                    b.HasOne("DataAccess.Entities.Employee", "Employee")
                        .WithMany("SalaryComponents")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.Entities.Field", "Field")
                        .WithMany("SalaryComponents")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
