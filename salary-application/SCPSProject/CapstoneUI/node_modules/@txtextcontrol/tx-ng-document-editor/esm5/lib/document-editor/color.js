/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Color = /** @class */ (function () {
    function Color(r, g, b, a) {
        if (a === void 0) { a = 0xFF; }
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.A = 0xFF;
        this.R = r;
        this.G = g;
        this.B = b;
        this.A = a;
    }
    /**
     * @return {?}
     */
    Color.prototype.toHexString = /**
     * @return {?}
     */
    function () {
        return "#" + pad(this.R.toString(16)) + pad(this.G.toString(16)) + pad(this.B.toString(16));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Color.fromHexString = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var r;
        /** @type {?} */
        var g;
        /** @type {?} */
        var b;
        if (!value || value[0] != '#' || (value.length != 7 && value.length != 4)) {
            throw new Error('String is not a hex color value.');
        }
        if (value.length === 7) {
            r = value.substring(1, 3);
            g = value.substring(3, 5);
            b = value.substring(5, 7);
            return new Color(parseInt(r, 16), parseInt(g, 16), parseInt(b, 16));
        }
        else {
            r = value[1];
            g = value[2];
            b = value[3];
            return new Color(parseInt(r + r, 16), parseInt(g + g, 16), parseInt(b + b, 16));
        }
    };
    return Color;
}());
export { Color };
if (false) {
    /** @type {?} */
    Color.prototype.R;
    /** @type {?} */
    Color.prototype.G;
    /** @type {?} */
    Color.prototype.B;
    /** @type {?} */
    Color.prototype.A;
}
/**
 * @param {?} num
 * @param {?=} size
 * @return {?}
 */
function pad(num, size) {
    if (size === void 0) { size = 2; }
    /** @type {?} */
    var result = num + '';
    while (result.length < size)
        result = '0' + result;
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHh0ZXh0Y29udHJvbC90eC1uZy1kb2N1bWVudC1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZG9jdW1lbnQtZWRpdG9yL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtJQU1HLGVBQVksQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBZ0I7UUFBaEIsa0JBQUEsRUFBQSxRQUFnQjtRQUx0RCxNQUFDLEdBQVcsQ0FBQyxDQUFDO1FBQ2QsTUFBQyxHQUFXLENBQUMsQ0FBQztRQUNkLE1BQUMsR0FBVyxDQUFDLENBQUM7UUFDZCxNQUFDLEdBQVcsSUFBSSxDQUFDO1FBR3JCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsQ0FBQzs7OztJQUVELDJCQUFXOzs7SUFBWDtRQUNHLE9BQU8sTUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUcsQ0FBQTtJQUM5RixDQUFDOzs7OztJQUVhLG1CQUFhOzs7O0lBQTNCLFVBQTRCLEtBQWE7O1lBQ2xDLENBQVM7O1lBQUUsQ0FBUzs7WUFBRSxDQUFTO1FBRW5DLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDeEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQixDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFCLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQixPQUFPLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEU7YUFDSTtZQUNGLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLE9BQU8sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNsRjtJQUNKLENBQUM7SUFDSixZQUFDO0FBQUQsQ0FBQyxBQXJDRCxJQXFDQzs7OztJQXBDRSxrQkFBcUI7O0lBQ3JCLGtCQUFxQjs7SUFDckIsa0JBQXFCOztJQUNyQixrQkFBd0I7Ozs7Ozs7QUFtQzNCLFNBQVMsR0FBRyxDQUFDLEdBQVEsRUFBRSxJQUFnQjtJQUFoQixxQkFBQSxFQUFBLFFBQWdCOztRQUNoQyxNQUFNLEdBQVksR0FBRyxHQUFHLEVBQUU7SUFDOUIsT0FBTyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUk7UUFBRSxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztJQUNuRCxPQUFPLE1BQU0sQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENvbG9yIHtcclxuICAgcHVibGljIFI6IG51bWJlciA9IDA7XHJcbiAgIHB1YmxpYyBHOiBudW1iZXIgPSAwO1xyXG4gICBwdWJsaWMgQjogbnVtYmVyID0gMDtcclxuICAgcHVibGljIEE6IG51bWJlciA9IDB4RkY7XHJcblxyXG4gICBjb25zdHJ1Y3RvcihyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIgPSAweEZGKSB7XHJcbiAgICAgIHRoaXMuUiA9IHI7XHJcbiAgICAgIHRoaXMuRyA9IGc7XHJcbiAgICAgIHRoaXMuQiA9IGI7XHJcbiAgICAgIHRoaXMuQSA9IGE7XHJcbiAgIH1cclxuXHJcbiAgIHRvSGV4U3RyaW5nKCkgOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gYCMke3BhZCh0aGlzLlIudG9TdHJpbmcoMTYpKX0ke3BhZCh0aGlzLkcudG9TdHJpbmcoMTYpKX0ke3BhZCh0aGlzLkIudG9TdHJpbmcoMTYpKX1gXHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgZnJvbUhleFN0cmluZyh2YWx1ZTogc3RyaW5nKSA6IENvbG9yIHtcclxuICAgICAgbGV0IHI6IHN0cmluZywgZzogc3RyaW5nLCBiOiBzdHJpbmc7ICAgICAgICAgICAgXHJcblxyXG4gICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlWzBdICE9ICcjJyB8fCAodmFsdWUubGVuZ3RoICE9IDcgJiYgdmFsdWUubGVuZ3RoICE9IDQpKSB7XHJcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIGlzIG5vdCBhIGhleCBjb2xvciB2YWx1ZS4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNykge1xyXG4gICAgICAgICByID0gdmFsdWUuc3Vic3RyaW5nKDEsIDMpO1xyXG4gICAgICAgICBnID0gdmFsdWUuc3Vic3RyaW5nKDMsIDUpO1xyXG4gICAgICAgICBiID0gdmFsdWUuc3Vic3RyaW5nKDUsIDcpO1xyXG4gICAgICAgICByZXR1cm4gbmV3IENvbG9yKHBhcnNlSW50KHIsIDE2KSwgcGFyc2VJbnQoZywgMTYpLCBwYXJzZUludChiLCAxNikpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICByID0gdmFsdWVbMV07XHJcbiAgICAgICAgIGcgPSB2YWx1ZVsyXTtcclxuICAgICAgICAgYiA9IHZhbHVlWzNdO1xyXG4gICAgICAgICByZXR1cm4gbmV3IENvbG9yKHBhcnNlSW50KHIgKyByLCAxNiksIHBhcnNlSW50KGcgKyBnLCAxNiksIHBhcnNlSW50KGIgKyBiLCAxNikpO1xyXG4gICAgICB9XHJcbiAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcGFkKG51bTogYW55LCBzaXplOiBudW1iZXIgPSAyKSA6IHN0cmluZyB7XHJcbiAgIGxldCByZXN1bHQgOiBzdHJpbmcgPSBudW0gKyAnJztcclxuICAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCBzaXplKSByZXN1bHQgPSAnMCcgKyByZXN1bHQ7XHJcbiAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuIl19