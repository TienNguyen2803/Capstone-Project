/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class Color {
    /**
     * @param {?} r
     * @param {?} g
     * @param {?} b
     * @param {?=} a
     */
    constructor(r, g, b, a = 0xFF) {
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.A = 0xFF;
        this.R = r;
        this.G = g;
        this.B = b;
        this.A = a;
    }
    /**
     * @return {?}
     */
    toHexString() {
        return `#${pad(this.R.toString(16))}${pad(this.G.toString(16))}${pad(this.B.toString(16))}`;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static fromHexString(value) {
        /** @type {?} */
        let r;
        /** @type {?} */
        let g;
        /** @type {?} */
        let b;
        if (!value || value[0] != '#' || (value.length != 7 && value.length != 4)) {
            throw new Error('String is not a hex color value.');
        }
        if (value.length === 7) {
            r = value.substring(1, 3);
            g = value.substring(3, 5);
            b = value.substring(5, 7);
            return new Color(parseInt(r, 16), parseInt(g, 16), parseInt(b, 16));
        }
        else {
            r = value[1];
            g = value[2];
            b = value[3];
            return new Color(parseInt(r + r, 16), parseInt(g + g, 16), parseInt(b + b, 16));
        }
    }
}
if (false) {
    /** @type {?} */
    Color.prototype.R;
    /** @type {?} */
    Color.prototype.G;
    /** @type {?} */
    Color.prototype.B;
    /** @type {?} */
    Color.prototype.A;
}
/**
 * @param {?} num
 * @param {?=} size
 * @return {?}
 */
function pad(num, size = 2) {
    /** @type {?} */
    let result = num + '';
    while (result.length < size)
        result = '0' + result;
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHh0ZXh0Y29udHJvbC90eC1uZy1kb2N1bWVudC1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZG9jdW1lbnQtZWRpdG9yL2NvbG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNLE9BQU8sS0FBSzs7Ozs7OztJQU1mLFlBQVksQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsSUFBWSxJQUFJO1FBTHRELE1BQUMsR0FBVyxDQUFDLENBQUM7UUFDZCxNQUFDLEdBQVcsQ0FBQyxDQUFDO1FBQ2QsTUFBQyxHQUFXLENBQUMsQ0FBQztRQUNkLE1BQUMsR0FBVyxJQUFJLENBQUM7UUFHckIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsV0FBVztRQUNSLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQzlGLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFhOztZQUNsQyxDQUFTOztZQUFFLENBQVM7O1lBQUUsQ0FBUztRQUVuQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ3hFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUN0RDtRQUVELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFCLENBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQixDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUIsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO2FBQ0k7WUFDRixDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixPQUFPLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDbEY7SUFDSixDQUFDO0NBQ0g7OztJQXBDRSxrQkFBcUI7O0lBQ3JCLGtCQUFxQjs7SUFDckIsa0JBQXFCOztJQUNyQixrQkFBd0I7Ozs7Ozs7QUFtQzNCLFNBQVMsR0FBRyxDQUFDLEdBQVEsRUFBRSxPQUFlLENBQUM7O1FBQ2hDLE1BQU0sR0FBWSxHQUFHLEdBQUcsRUFBRTtJQUM5QixPQUFPLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSTtRQUFFLE1BQU0sR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0lBQ25ELE9BQU8sTUFBTSxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ29sb3Ige1xyXG4gICBwdWJsaWMgUjogbnVtYmVyID0gMDtcclxuICAgcHVibGljIEc6IG51bWJlciA9IDA7XHJcbiAgIHB1YmxpYyBCOiBudW1iZXIgPSAwO1xyXG4gICBwdWJsaWMgQTogbnVtYmVyID0gMHhGRjtcclxuXHJcbiAgIGNvbnN0cnVjdG9yKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE6IG51bWJlciA9IDB4RkYpIHtcclxuICAgICAgdGhpcy5SID0gcjtcclxuICAgICAgdGhpcy5HID0gZztcclxuICAgICAgdGhpcy5CID0gYjtcclxuICAgICAgdGhpcy5BID0gYTtcclxuICAgfVxyXG5cclxuICAgdG9IZXhTdHJpbmcoKSA6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiBgIyR7cGFkKHRoaXMuUi50b1N0cmluZygxNikpfSR7cGFkKHRoaXMuRy50b1N0cmluZygxNikpfSR7cGFkKHRoaXMuQi50b1N0cmluZygxNikpfWBcclxuICAgfVxyXG5cclxuICAgcHVibGljIHN0YXRpYyBmcm9tSGV4U3RyaW5nKHZhbHVlOiBzdHJpbmcpIDogQ29sb3Ige1xyXG4gICAgICBsZXQgcjogc3RyaW5nLCBnOiBzdHJpbmcsIGI6IHN0cmluZzsgICAgICAgICAgICBcclxuXHJcbiAgICAgIGlmICghdmFsdWUgfHwgdmFsdWVbMF0gIT0gJyMnIHx8ICh2YWx1ZS5sZW5ndGggIT0gNyAmJiB2YWx1ZS5sZW5ndGggIT0gNCkpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgaXMgbm90IGEgaGV4IGNvbG9yIHZhbHVlLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA3KSB7XHJcbiAgICAgICAgIHIgPSB2YWx1ZS5zdWJzdHJpbmcoMSwgMyk7XHJcbiAgICAgICAgIGcgPSB2YWx1ZS5zdWJzdHJpbmcoMywgNSk7XHJcbiAgICAgICAgIGIgPSB2YWx1ZS5zdWJzdHJpbmcoNSwgNyk7XHJcbiAgICAgICAgIHJldHVybiBuZXcgQ29sb3IocGFyc2VJbnQociwgMTYpLCBwYXJzZUludChnLCAxNiksIHBhcnNlSW50KGIsIDE2KSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHIgPSB2YWx1ZVsxXTtcclxuICAgICAgICAgZyA9IHZhbHVlWzJdO1xyXG4gICAgICAgICBiID0gdmFsdWVbM107XHJcbiAgICAgICAgIHJldHVybiBuZXcgQ29sb3IocGFyc2VJbnQociArIHIsIDE2KSwgcGFyc2VJbnQoZyArIGcsIDE2KSwgcGFyc2VJbnQoYiArIGIsIDE2KSk7XHJcbiAgICAgIH1cclxuICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYWQobnVtOiBhbnksIHNpemU6IG51bWJlciA9IDIpIDogc3RyaW5nIHtcclxuICAgbGV0IHJlc3VsdCA6IHN0cmluZyA9IG51bSArICcnO1xyXG4gICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IHNpemUpIHJlc3VsdCA9ICcwJyArIHJlc3VsdDtcclxuICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iXX0=